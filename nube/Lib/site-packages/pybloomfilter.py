from bitarray import bitarray
import hashlib

class BloomFilter:
    def __init__(self, size=128, hash_count=3):
        self.size = size
        self.hash_count = hash_count
        self.bit_array = bitarray(size)
        self.bit_array.setall(0)

    def _hashes(self, item):
        """Genera múltiples valores hash para el item."""
        return [int(hashlib.md5((item + str(i)).encode()).hexdigest(), 16) % self.size for i in range(self.hash_count)]

    def insert(self, item):
        """Inserta un valor en el filtro de Bloom."""
        for h in self._hashes(item):
            self.bit_array[h] = 1

    def query(self, item):
        """Consulta si un valor está probablemente en el conjunto."""
        return all(self.bit_array[h] for h in self._hashes(item))

    def __contains__(self, item):
        return self.query(item)

# ---- Ejemplo de uso ----
if __name__ == "__main__":
    b = BloomFilter()
    b.insert("ahmed")
    b.insert("ayman")

    print("ahmed" in b)  # True
    print("ayman" in b)  # True
    print("memo" in b)   # False
